# Windows 11 App Installation Script
# PowerShell version of the arch-install script
# Author: Generated by Cascade
# Usage: Run as Administrator in PowerShell

param(
    [switch]$DryRun = $false,
    [int]$RetryCount = 3,
    [int]$RetryDelay = 2
)

# Requires -RunAsAdministrator

$ErrorActionPreference = "Stop"
$ProgressPreference = "SilentlyContinue"

# Configuration
$LOG_FILE = "setup.log"
$ERROR_LOG = "errors.log"
$SUMMARY_JSON = "summary.json"
$DISCORD_WEBHOOK_URL = "https://discordapp.com/api/webhooks/1412280278533144666/53oHRNs4WGdaxWz8qbeVipDRiD3hamTYi9FBhv9cxjoksjBprbTUdhwZxWrFIO69KBRa"

# Lists to track installation status
$SUCCESS_LIST = @()
$FAILED_LIST = @()
$SKIPPED_LIST = @()

# Logging function
function Write-Log {
    param([string]$Message, [string]$Level = "INFO")
    $timestamp = Get-Date -Format "yyyy-MM-dd HH:mm:ss"
    $logMessage = "[$timestamp] [$Level] $Message"
    Write-Host $logMessage
    Add-Content -Path $LOG_FILE -Value $logMessage
}

# Discord notification function
function Send-Discord {
    param([string]$Message)
    if ($DISCORD_WEBHOOK_URL) {
        try {
            $body = @{ content = $Message } | ConvertTo-Json
            Invoke-RestMethod -Uri $DISCORD_WEBHOOK_URL -Method Post -Body $body -ContentType "application/json" | Out-Null
        } catch {
            Write-Log "Failed to send Discord notification" "WARN"
        }
    }
}

# Error handling function
function Handle-Error {
    param([string]$PackageName)
    Write-Log "Error occurred during installation of $PackageName" "ERROR"
    $script:FAILED_LIST += $PackageName
    Send-Discord "‚ö†Ô∏è Failed to install **$PackageName**"
}

# Retry function
function Invoke-WithRetry {
    param(
        [scriptblock]$ScriptBlock,
        [string]$PackageName
    )
    
    $count = 0
    do {
        try {
            & $ScriptBlock
            $script:SUCCESS_LIST += $PackageName
            Send-Discord "‚úÖ Successfully installed **$PackageName**"
            return $true
        } catch {
            $count++
            if ($count -ge $RetryCount) {
                Handle-Error $PackageName
                return $false
            }
            Write-Log "Retrying $PackageName ($count/$RetryCount) after $RetryDelay seconds..." "WARN"
            Start-Sleep -Seconds $RetryDelay
        }
    } while ($count -lt $RetryCount)
}

# Check internet connectivity
function Test-InternetConnection {
    try {
        Test-NetConnection -ComputerName "google.com" -Port 80 -InformationLevel Quiet
        return $true
    } catch {
        Write-Log "No internet connection detected" "ERROR"
        Send-Discord "‚ùå No internet connection detected. Aborting."
        exit 1
    }
}

# Install Chocolatey
function Install-Chocolatey {
    if (Get-Command choco -ErrorAction SilentlyContinue) {
        Write-Log "Chocolatey is already installed, skipping..." "INFO"
        $script:SKIPPED_LIST += "Chocolatey"
        return
    }

    Write-Log "Installing Chocolatey..." "INFO"
    if ($DryRun) {
        Write-Log "DRY RUN: Would install Chocolatey" "INFO"
        $script:SUCCESS_LIST += "Chocolatey"
    } else {
        Invoke-WithRetry -PackageName "Chocolatey" -ScriptBlock {
            Set-ExecutionPolicy Bypass -Scope Process -Force
            [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072
            Invoke-Expression ((New-Object System.Net.WebClient).DownloadString('https://community.chocolatey.org/install.ps1'))
        }
    }
}

# Install winget package
function Install-WingetPackage {
    param([string]$PackageId, [string]$PackageName = $PackageId)
    
    if (winget list --id $PackageId --accept-source-agreements | Select-String $PackageId) {
        Write-Log "$PackageName is already installed, skipping..." "INFO"
        $script:SKIPPED_LIST += $PackageName
        return
    }

    Write-Log "Installing $PackageName via winget..." "INFO"
    if ($DryRun) {
        Write-Log "DRY RUN: Would install $PackageName" "INFO"
        $script:SUCCESS_LIST += $PackageName
    } else {
        Invoke-WithRetry -PackageName "$PackageName (winget)" -ScriptBlock {
            winget install --id $PackageId --silent --accept-source-agreements --accept-package-agreements
        }
    }
}

# Install Chocolatey package
function Install-ChocoPackage {
    param([string]$PackageName)
    
    if (choco list --local-only | Select-String "^$PackageName ") {
        Write-Log "$PackageName is already installed, skipping..." "INFO"
        $script:SKIPPED_LIST += $PackageName
        return
    }

    Write-Log "Installing $PackageName via Chocolatey..." "INFO"
    if ($DryRun) {
        Write-Log "DRY RUN: Would install $PackageName" "INFO"
        $script:SUCCESS_LIST += $PackageName
    } else {
        Invoke-WithRetry -PackageName "$PackageName (Chocolatey)" -ScriptBlock {
            choco install $PackageName -y
        }
    }
}

# Install LazyVim
function Install-LazyVim {
    Write-Log "Setting up LazyVim..." "INFO"
    
    $nvimConfigPath = "$env:LOCALAPPDATA\nvim"
    
    # Check if LazyVim is already installed
    if ((Test-Path $nvimConfigPath) -and (Test-Path "$nvimConfigPath\lua\config\lazy.lua")) {
        Write-Log "LazyVim appears to be already installed, skipping..." "INFO"
        $script:SKIPPED_LIST += "LazyVim"
        return
    }
    
    # Backup existing nvim config if it exists
    if (Test-Path $nvimConfigPath) {
        $backupPath = "$nvimConfigPath.bak.$(Get-Date -Format 'yyyyMMdd_HHmmss')"
        Write-Log "Backing up existing Neovim config to $backupPath..." "INFO"
        if (-not $DryRun) {
            Move-Item $nvimConfigPath $backupPath
        }
    }
    
    # Clone LazyVim starter template
    if ($DryRun) {
        Write-Log "DRY RUN: Would clone LazyVim starter template" "INFO"
        $script:SUCCESS_LIST += "LazyVim"
    } else {
        Invoke-WithRetry -PackageName "LazyVim" -ScriptBlock {
            git clone https://github.com/LazyVim/starter $nvimConfigPath
            Remove-Item "$nvimConfigPath\.git" -Recurse -Force
        }
    }
}

# Progress bar function
function Show-Progress {
    param([int]$Current, [int]$Total)
    $percent = [math]::Round(($Current / $Total) * 100)
    $filled = [math]::Round($percent / 2)
    $empty = 50 - $filled
    
    $bar = "[" + ("#" * $filled) + ("-" * $empty) + "] $percent%"
    Write-Host "`r$bar" -NoNewline
}

# Package configurations
$WINGET_PACKAGES = @(
    @{Id="Git.Git"; Name="Git"},
    @{Id="Microsoft.VisualStudioCode"; Name="Visual Studio Code"},
    @{Id="Neovim.Neovim"; Name="Neovim"},
    @{Id="Microsoft.PowerShell"; Name="PowerShell 7"},
    @{Id="Python.Python.3.12"; Name="Python 3.12"},
    @{Id="OpenJS.NodeJS"; Name="Node.js"},
    @{Id="Brave.Brave"; Name="Brave Browser"},
    @{Id="Discord.Discord"; Name="Discord"},
    @{Id="Valve.Steam"; Name="Steam"},
    @{Id="VideoLAN.VLC"; Name="VLC Media Player"},
    @{Id="Spotify.Spotify"; Name="Spotify"},
    @{Id="Docker.DockerDesktop"; Name="Docker Desktop"},
    @{Id="Microsoft.WindowsTerminal"; Name="Windows Terminal"},
    @{Id="7zip.7zip"; Name="7-Zip"},
    @{Id="Google.AndroidStudio"; Name="Android Studio"}
)

$CHOCO_PACKAGES = @(
    "curl",
    "wget",
    "htop",
    "tree",
    "ffmpeg",
    "adb",
    "powertoys",
    "everything",
    "notepadplusplus"
)

# Calculate total tasks
$TOTAL = $WINGET_PACKAGES.Count + $CHOCO_PACKAGES.Count + 3  # +3 for Chocolatey, LazyVim, and cleanup
$CURRENT = 0

# Main execution
Write-Log "Starting Windows 11 setup with $TOTAL tasks..." "INFO"
Test-InternetConnection
Send-Discord "üöÄ Starting Windows 11 setup with $TOTAL tasks..."

# Install Chocolatey first
Install-Chocolatey
$CURRENT++
Show-Progress $CURRENT $TOTAL

# Update winget
Write-Log "Updating winget sources..." "INFO"
if (-not $DryRun) {
    winget source update
}

# Install winget packages
Write-Log "Installing winget packages..." "INFO"
foreach ($package in $WINGET_PACKAGES) {
    Install-WingetPackage -PackageId $package.Id -PackageName $package.Name
    $CURRENT++
    Show-Progress $CURRENT $TOTAL
}

# Install Chocolatey packages
Write-Log "Installing Chocolatey packages..." "INFO"
foreach ($package in $CHOCO_PACKAGES) {
    Install-ChocoPackage -PackageName $package
    $CURRENT++
    Show-Progress $CURRENT $TOTAL
}

# Install LazyVim
Write-Log "Installing LazyVim..." "INFO"
Install-LazyVim
$CURRENT++
Show-Progress $CURRENT $TOTAL

# Cleanup
Write-Log "Cleaning up..." "INFO"
if (-not $DryRun) {
    choco upgrade all -y
}
$CURRENT++
Show-Progress $CURRENT $TOTAL

Write-Host ""  # New line after progress bar

# Summary
Write-Log "===== Setup Summary =====" "INFO"
if ($SUCCESS_LIST.Count -gt 0) {
    Write-Log "Successful installs: $($SUCCESS_LIST -join ', ')" "INFO"
}
if ($SKIPPED_LIST.Count -gt 0) {
    Write-Log "Skipped installs: $($SKIPPED_LIST -join ', ')" "INFO"
}
if ($FAILED_LIST.Count -gt 0) {
    Write-Log "Failed installs: $($FAILED_LIST -join ', ')" "ERROR"
    Write-Log "Check $ERROR_LOG for details." "ERROR"
}

# Create summary JSON
$summary = @{
    success = $SUCCESS_LIST
    skipped = $SKIPPED_LIST
    failed = $FAILED_LIST
} | ConvertTo-Json

$summary | Out-File -FilePath $SUMMARY_JSON

Send-Discord "üìä Windows 11 setup finished! ‚úÖ $($SUCCESS_LIST.Count) success, ‚ö†Ô∏è $($SKIPPED_LIST.Count) skipped, ‚ùå $($FAILED_LIST.Count) failed."

Write-Log "Windows 11 setup complete!" "INFO"
