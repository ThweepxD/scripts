#!/bin/bash

# Steam Drive Setup Script
# Mounts additional drives and configures Flatpak Steam to access them
# Author: Generated by Cascade

set -Eeuo pipefail

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

log() {
    echo -e "${GREEN}[$(date +'%Y-%m-%d %H:%M:%S')] $1${NC}"
}

error() {
    echo -e "${RED}[ERROR] $1${NC}" >&2
}

warning() {
    echo -e "${YELLOW}[WARNING] $1${NC}"
}

info() {
    echo -e "${BLUE}[INFO] $1${NC}"
}

# Check if running as root
if [[ $EUID -eq 0 ]]; then
    error "This script should NOT be run as root. Run as regular user with sudo access."
    exit 1
fi

# Function to detect available drives
detect_drives() {
    log "Detecting available drives..."
    lsblk -f -o NAME,SIZE,FSTYPE,MOUNTPOINT | grep -E "(ext4|ntfs|exfat|fat32)"
    echo ""
    info "Available drives shown above. Note unmounted drives for setup."
}

# Function to create mount point
create_mount_point() {
    local mount_point=$1
    if [[ ! -d "$mount_point" ]]; then
        log "Creating mount point: $mount_point"
        sudo mkdir -p "$mount_point"
        sudo chown $USER:$USER "$mount_point"
    else
        info "Mount point $mount_point already exists"
    fi
}

# Function to mount drive
mount_drive() {
    local device=$1
    local mount_point=$2
    local fstype=$3
    
    # Check if already mounted
    if mountpoint -q "$mount_point"; then
        info "Drive already mounted at $mount_point"
        return 0
    fi
    
    log "Mounting $device to $mount_point (filesystem: $fstype)"
    
    case $fstype in
        "ntfs")
            sudo mount -t ntfs-3g "$device" "$mount_point" -o uid=$USER,gid=$USER,umask=0022,defaults
            ;;
        "exfat"|"fat32")
            sudo mount -t exfat "$device" "$mount_point" -o uid=$USER,gid=$USER,umask=0022,defaults
            ;;
        "ext4")
            sudo mount -t ext4 "$device" "$mount_point"
            sudo chown -R $USER:$USER "$mount_point"
            ;;
        *)
            sudo mount "$device" "$mount_point"
            ;;
    esac
    
    if mountpoint -q "$mount_point"; then
        log "Successfully mounted $device to $mount_point"
    else
        error "Failed to mount $device"
        return 1
    fi
}

# Function to add to fstab for permanent mounting
add_to_fstab() {
    local device=$1
    local mount_point=$2
    local fstype=$3
    
    # Get UUID of the device
    local uuid=$(sudo blkid -s UUID -o value "$device")
    
    if [[ -z "$uuid" ]]; then
        error "Could not get UUID for $device"
        return 1
    fi
    
    # Check if already in fstab
    if grep -q "$uuid" /etc/fstab; then
        info "Drive already in fstab"
        return 0
    fi
    
    log "Adding drive to fstab for permanent mounting"
    
    local fstab_entry
    case $fstype in
        "ntfs")
            fstab_entry="UUID=$uuid $mount_point ntfs-3g uid=$USER,gid=$USER,umask=0022,defaults 0 0"
            ;;
        "exfat"|"fat32")
            fstab_entry="UUID=$uuid $mount_point exfat uid=$USER,gid=$USER,umask=0022,defaults 0 0"
            ;;
        "ext4")
            fstab_entry="UUID=$uuid $mount_point ext4 defaults 0 2"
            ;;
        *)
            fstab_entry="UUID=$uuid $mount_point auto defaults 0 0"
            ;;
    esac
    
    echo "$fstab_entry" | sudo tee -a /etc/fstab
    log "Added to fstab: $fstab_entry"
}

# Function to configure Flatpak Steam permissions
configure_steam_permissions() {
    local mount_point=$1
    
    log "Configuring Flatpak Steam permissions for $mount_point"
    
    # Give Steam access to the mount point
    flatpak override --user com.valvesoftware.Steam --filesystem="$mount_point"
    
    # Also give access to common game directories
    if [[ -d "$mount_point/SteamLibrary" ]]; then
        flatpak override --user com.valvesoftware.Steam --filesystem="$mount_point/SteamLibrary"
    fi
    
    if [[ -d "$mount_point/Games" ]]; then
        flatpak override --user com.valvesoftware.Steam --filesystem="$mount_point/Games"
    fi
    
    log "Steam permissions configured for $mount_point"
}

# Function to create Steam library folder
create_steam_library() {
    local mount_point=$1
    local steam_lib="$mount_point/SteamLibrary"
    
    if [[ ! -d "$steam_lib" ]]; then
        log "Creating Steam library folder at $steam_lib"
        mkdir -p "$steam_lib"
        chmod 755 "$steam_lib"
        
        # Create steamapps folder
        mkdir -p "$steam_lib/steamapps"
        chmod 755 "$steam_lib/steamapps"
        
        info "Steam library created at $steam_lib"
        info "You can now add this as a Steam library folder in Steam settings"
    else
        info "Steam library already exists at $steam_lib"
    fi
}

# Interactive setup function
interactive_setup() {
    echo ""
    log "=== Steam Drive Setup ==="
    echo ""
    
    detect_drives
    
    echo ""
    read -p "Enter the device to mount (e.g., /dev/sdb1): " device
    
    if [[ ! -b "$device" ]]; then
        error "Device $device does not exist or is not a block device"
        exit 1
    fi
    
    # Detect filesystem type
    fstype=$(sudo blkid -s TYPE -o value "$device")
    if [[ -z "$fstype" ]]; then
        warning "Could not detect filesystem type. Assuming ext4."
        fstype="ext4"
    fi
    
    info "Detected filesystem: $fstype"
    
    echo ""
    read -p "Enter mount point (e.g., /mnt/games): " mount_point
    
    # Validate mount point
    if [[ ! "$mount_point" =~ ^/mnt/ ]] && [[ ! "$mount_point" =~ ^/media/ ]]; then
        warning "Mount point should typically be under /mnt/ or /media/"
    fi
    
    echo ""
    info "Summary:"
    info "Device: $device"
    info "Mount Point: $mount_point"
    info "Filesystem: $fstype"
    echo ""
    
    read -p "Proceed with setup? (y/N): " confirm
    if [[ ! "$confirm" =~ ^[Yy]$ ]]; then
        info "Setup cancelled"
        exit 0
    fi
    
    # Perform setup
    create_mount_point "$mount_point"
    mount_drive "$device" "$mount_point" "$fstype"
    
    read -p "Add to fstab for permanent mounting? (y/N): " fstab_confirm
    if [[ "$fstab_confirm" =~ ^[Yy]$ ]]; then
        add_to_fstab "$device" "$mount_point" "$fstype"
    fi
    
    configure_steam_permissions "$mount_point"
    create_steam_library "$mount_point"
    
    echo ""
    log "=== Setup Complete! ==="
    info "Drive mounted at: $mount_point"
    info "Steam library created at: $mount_point/SteamLibrary"
    info "Flatpak Steam permissions configured"
    echo ""
    info "Next steps:"
    info "1. Open Steam"
    info "2. Go to Steam > Settings > Storage"
    info "3. Click '+' to add the new library folder: $mount_point/SteamLibrary"
    info "4. You can now install games to the additional drive"
}

# Function to show current mounts and Steam permissions
show_status() {
    log "=== Current Drive Status ==="
    echo ""
    info "Mounted drives:"
    df -h | grep -E "(mnt|media)"
    echo ""
    
    info "Flatpak Steam permissions:"
    flatpak info --show-permissions com.valvesoftware.Steam 2>/dev/null | grep filesystem || info "No custom filesystem permissions set"
    echo ""
}

# Main menu
case "${1:-}" in
    "setup"|"")
        interactive_setup
        ;;
    "status")
        show_status
        ;;
    "detect")
        detect_drives
        ;;
    *)
        echo "Usage: $0 [setup|status|detect]"
        echo ""
        echo "Commands:"
        echo "  setup   - Interactive drive setup (default)"
        echo "  status  - Show current mount and permission status"
        echo "  detect  - Detect available drives"
        exit 1
        ;;
esac
